{"version":3,"sources":["constants/actionTypes.js","services/employees-service.js","utils/utils.js","actions/employess.js","selectors/employees.js","constants/alphabets.js","containers/LettersAlphabet/LetterAlphabet.js","containers/Employee/index.js","containers/Employee/Employee.js","containers/LettersAlphabet/index.js","containers/LettersAlphabet/LettersAlphabet.js","components/Employees/index.js","components/Employees/Employees.js","containers/EmployeesBirthday/BirthdaysListItem.js","containers/EmployeesBirthday/BirthdaysList.js","constants/months.js","containers/EmployeesBirthday/index.js","containers/EmployeesBirthday/EmployeesBirthday.js","pages/EmployeesPage/index.js","pages/EmployeesPage/EmployeesPage.js","App.js","reducers/rootReducer.js","index.js"],"names":["LOAD_EMPLOYEES","SET_ACTIVE_EMPLOYEES","getAll","a","Axios","get","URL","result","status","Error","data","this","sortByLastName","list","sort","b","lastName","localeCompare","dateConversion","date","convertedDate","Date","day","getDate","month","toLocaleString","year","getFullYear","getMonth","saveActiveEmployees","employees","localStorage","setItem","JSON","stringify","loadActiveEmployees","activeEmployees","getItem","parse","getSavedEmployees","type","payload","getEmployees","state","getActiveEmployees","englishAlphabet","LetterAlphabet","children","props","title","className","Employee","dispatch","useDispatch","useSelector","employee","firstName","id","fullName","isActiveEmployee","findIndex","onChangeStatusEmployee","e","getState","filtredEmployees","filter","item","removeFromActiveEmployees","store","addToActiveEmployees","action","name","value","checked","onChange","LettersAlphabet","useEffect","EmployeesService","then","map","letter","employeesArray","sortedList","letterAlphabet","filterByLetter","length","Employees","BirthdaysListItem","BirthdaysList","employeesList","listBirthdays","dob","employeesBirthdayList","months","EmployeesBirthday","convertedEmployeesBirthday","monthsList","currentDate","currentMonths","index","indexOf","slice","sortMonths","EmployeesPage","createStore","applyMiddleware","thunk","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.63b3b027.chunk.js","sourcesContent":["const LOAD_EMPLOYEES = 'LOAD_EMPLOYEES';\r\nconst SET_ACTIVE_EMPLOYEES = 'SET_ACTIVE_EMPLOYEES';\r\n\r\nexport { LOAD_EMPLOYEES, SET_ACTIVE_EMPLOYEES };\r\n","import Axios from 'axios';\r\n\r\nclass EmployeesService {\r\n  constructor() {\r\n    this.URL = 'https://yalantis-react-school-api.yalantis.com/api/task0/users';\r\n  }\r\n\r\n  getAll = async () => {\r\n    const result = await Axios.get(this.URL);\r\n    if (result.status < 200 && result.status > 299) {\r\n      throw new Error(`Could not get  ${this.URL}, status: ${result.status}`);\r\n    }\r\n    return await result.data;\r\n  };\r\n}\r\n\r\nexport default new EmployeesService();\r\n","const filterByLetter = (list = [], letterAlphabet = 'A') => {\r\n  return list.filter((item) => item.lastName[0] === letterAlphabet);\r\n};\r\n\r\nconst sortByLastName = (list) => {\r\n  return list.sort((a, b) => a.lastName.localeCompare(b.lastName));\r\n};\r\n\r\nconst dateConversion = (date) => {\r\n  const convertedDate = new Date(date);\r\n  const day = convertedDate.getDate();\r\n  const month = convertedDate.toLocaleString('en-us', { month: 'long' });\r\n  const year = convertedDate.getFullYear();\r\n\r\n  return `${day} ${month}, ${year} year`;\r\n};\r\n\r\nconst getMonth = (date) => {\r\n  const convertedDate = new Date(date);\r\n  return convertedDate.toLocaleString('en-us', { month: 'long' });\r\n};\r\n\r\nconst sortMonths = (list) => {\r\n  const currentDate = new Date();\r\n  const currentMonths = getMonth(currentDate);\r\n  const index = list.indexOf(currentMonths);\r\n\r\n  if (index === 0) {\r\n    return list;\r\n  }\r\n\r\n  if (index === list.length - 1) {\r\n    return [list[index], ...list.slice(0, list.length - 1)];\r\n  }\r\n\r\n  if (index > 0 && index !== list.length - 1) {\r\n    return [...list.slice(index, list.length), ...list.slice(0, index)];\r\n  }\r\n};\r\n\r\nconst saveActiveEmployees = (employees) => {\r\n  localStorage.setItem('activeEmployees', JSON.stringify(employees));\r\n};\r\n\r\nconst getSavedEmployees = () => {\r\n  const employees = localStorage.getItem('activeEmployees');\r\n  if (employees) {\r\n    return JSON.parse(employees);\r\n  } else {\r\n    return [];\r\n  }\r\n};\r\n\r\nexport { filterByLetter, sortByLastName, dateConversion, saveActiveEmployees, getSavedEmployees, getMonth, sortMonths };\r\n","import EmployeesService from '../services/employees-service';\r\nimport { LOAD_EMPLOYEES, SET_ACTIVE_EMPLOYEES } from '../constants/actionTypes';\r\nimport { saveActiveEmployees, getSavedEmployees } from '../utils/utils';\r\n\r\nconst loadEmployees = () => {\r\n  return function (dispatch) {\r\n    EmployeesService.getAll().then((data) => {\r\n      dispatch({ type: LOAD_EMPLOYEES, payload: data });\r\n    });\r\n  };\r\n};\r\n\r\nconst addToActiveEmployees = (employee) => {\r\n  return function (dispatch, getState) {\r\n    const store = getState();\r\n    const activeEmployees = [...store.activeEmployees, employee];\r\n    saveActiveEmployees(activeEmployees);\r\n    dispatch({ type: SET_ACTIVE_EMPLOYEES, payload: activeEmployees });\r\n  };\r\n};\r\n\r\nconst removeFromActiveEmployees = (employee) => {\r\n  return function (dispatch, getState) {\r\n    const store = getState();\r\n    const activeEmployees = store.activeEmployees;\r\n    const filtredEmployees = activeEmployees.filter((item) => item.id !== employee.id);\r\n    saveActiveEmployees(filtredEmployees);\r\n    dispatch({ type: SET_ACTIVE_EMPLOYEES, payload: filtredEmployees });\r\n  };\r\n};\r\n\r\nconst loadActiveEmployees = () => {\r\n  const activeEmployees = getSavedEmployees();\r\n  return { type: SET_ACTIVE_EMPLOYEES, payload: activeEmployees };\r\n};\r\n\r\nexport { loadEmployees, addToActiveEmployees, removeFromActiveEmployees, loadActiveEmployees };\r\n","const getEmployees = (state) => state.employees;\r\nconst getActiveEmployees = (state) => state.activeEmployees;\r\n\r\nexport { getEmployees, getActiveEmployees };\r\n","const englishAlphabet = [\r\n  'A',\r\n  'B',\r\n  'C',\r\n  'D',\r\n  'E',\r\n  'F',\r\n  'G',\r\n  'H',\r\n  'I',\r\n  'J',\r\n  'K',\r\n  'L',\r\n  'M',\r\n  'N',\r\n  'O',\r\n  'P',\r\n  'Q',\r\n  'R',\r\n  'S',\r\n  'T',\r\n  'U',\r\n  'V',\r\n  'W',\r\n  'X',\r\n  'Y',\r\n  'Z',\r\n];\r\n\r\nexport { englishAlphabet };\r\n","const LetterAlphabet = ({ children, ...props }) => {\r\n  const { title, className } = props;\r\n  return (\r\n    <div className={className}>\r\n      <h3 className='title letter__title'>{title}</h3>\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LetterAlphabet;\r\n","import Employee from './Employee';\r\n\r\nexport default Employee;\r\n","import { useDispatch, useSelector } from 'react-redux';\r\nimport { addToActiveEmployees, removeFromActiveEmployees } from '../../actions/employess';\r\nimport { getActiveEmployees } from '../../selectors/employees';\r\nimport './Employee.css';\r\n\r\nconst Employee = ({ ...props }) => {\r\n  const dispatch = useDispatch();\r\n  const activeEmployees = useSelector(getActiveEmployees);\r\n\r\n  const { employee } = props;\r\n  const { firstName, lastName, id } = employee;\r\n  const fullName = `${lastName} ${firstName}`;\r\n\r\n  const isActiveEmployee = activeEmployees.findIndex((employee) => employee.id === id) >= 0;\r\n\r\n  const onChangeStatusEmployee = (e) => {\r\n    if (isActiveEmployee) {\r\n      dispatch(removeFromActiveEmployees(employee));\r\n    } else {\r\n      dispatch(addToActiveEmployees(employee));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className='employee'>\r\n      <h3 className={`title employee__title ${isActiveEmployee ? 'employee__title--active' : ''}`}>{fullName}</h3>\r\n      <form action=''>\r\n        <label className='employee__status-label'>\r\n          <input\r\n            className='employee__status-button'\r\n            type='radio'\r\n            name='status-employee'\r\n            value='false'\r\n            checked={isActiveEmployee ? false : true}\r\n            onChange={onChangeStatusEmployee}\r\n          />\r\n          <span>not active</span>\r\n        </label>\r\n        <label className='employee__status-label'>\r\n          <input\r\n            className='employee__status-button'\r\n            type='radio'\r\n            name='status-employee'\r\n            value='true'\r\n            checked={isActiveEmployee ? true : false}\r\n            onChange={onChangeStatusEmployee}\r\n          />\r\n          <span>active</span>\r\n        </label>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Employee;\r\n","import LettersAlphabet from './LettersAlphabet';\r\n\r\nexport default LettersAlphabet;\r\n","import { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport { loadEmployees, loadActiveEmployees } from '../../actions/employess';\r\nimport { getEmployees } from '../../selectors/employees';\r\nimport { filterByLetter, sortByLastName } from '../../utils/utils';\r\nimport { englishAlphabet } from '../../constants/alphabets';\r\nimport './LettersAlphabet.css';\r\n\r\nimport LetterAlphabet from './LetterAlphabet';\r\nimport Employee from '../Employee';\r\n\r\nconst LettersAlphabet = () => {\r\n  const employees = useSelector(getEmployees);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(loadEmployees());\r\n    dispatch(loadActiveEmployees());\r\n  }, []);\r\n\r\n  return englishAlphabet.map((letter) => {\r\n    let employeesArray = [];\r\n    const sortedList = sortByLastName(filterByLetter(employees, letter));\r\n\r\n    if (sortedList.length !== 0) {\r\n      employeesArray = sortedList.map((employee) => <Employee key={employee.id} employee={employee} />);\r\n    }\r\n\r\n    return (\r\n      <LetterAlphabet className='letter' key={letter} title={letter}>\r\n        {employeesArray.length !== 0 ? employeesArray : '- - - -'}\r\n      </LetterAlphabet>\r\n    );\r\n  });\r\n};\r\n\r\nexport default LettersAlphabet;\r\n","import Employees from './Employees';\r\n\r\nexport default Employees;\r\n","import LettersAlphabet from '../../containers/LettersAlphabet';\r\nimport './Employees.css';\r\n\r\nconst Employees = () => {\r\n  return (\r\n    <section className='employees column'>\r\n      <h2 className='title section__title'>Employees</h2>\r\n      <div className='letters'>\r\n        <LettersAlphabet />\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Employees;\r\n","const BirthdaysListItem = ({ ...props }) => {\r\n  const { employee } = props;\r\n  const { lastName, firstName, convertedDate } = employee;\r\n  const fullName = `${lastName} ${firstName}`;\r\n\r\n  return (\r\n    <li className='birthdays-list__item'>\r\n      {fullName} - {convertedDate}\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default BirthdaysListItem;\r\n","import { getMonth, sortByLastName } from '../../utils/utils';\r\nimport BirthdaysListItem from './BirthdaysListItem';\r\n\r\nconst BirthdaysList = ({ ...props }) => {\r\n  const { employeesList, month } = props;\r\n\r\n  const listBirthdays = sortByLastName(employeesList.filter((employee) => getMonth(employee.dob) === month));\r\n\r\n  const employeesBirthdayList = listBirthdays.map((employee) => (\r\n    <BirthdaysListItem key={employee.id} employee={employee} />\r\n  ));\r\n\r\n  if (listBirthdays.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <ul className='birthdays-list'>\r\n      <h3 className='birthdays-list__title'>{month}</h3>\r\n      {employeesBirthdayList}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default BirthdaysList;\r\n","const months = [\r\n  'January',\r\n  'February',\r\n  'March',\r\n  'April',\r\n  'May',\r\n  'June',\r\n  'July',\r\n  'August',\r\n  'September',\r\n  'October',\r\n  'November',\r\n  'December',\r\n];\r\n\r\nexport { months };\r\n","import EmployeesBirthday from './EmployeesBirthday';\r\n\r\nexport default EmployeesBirthday;\r\n","import { useSelector } from 'react-redux';\r\nimport { getActiveEmployees } from '../../selectors/employees';\r\nimport { dateConversion, sortMonths } from '../../utils/utils';\r\nimport BirthdaysList from './BirthdaysList';\r\nimport { months } from '../../constants/months.js';\r\nimport './EmployeesBirthday.css';\r\n\r\nconst EmployeesBirthday = () => {\r\n  const activeEmployees = useSelector(getActiveEmployees);\r\n  const convertedEmployeesBirthday = activeEmployees.map((employee) => ({\r\n    ...employee,\r\n    convertedDate: dateConversion(employee.dob),\r\n  }));\r\n\r\n  const sortedMonths = sortMonths(months);\r\n\r\n  const monthsList = sortedMonths.map((month) => {\r\n    return <BirthdaysList key={month} month={month} employeesList={convertedEmployeesBirthday} />;\r\n  });\r\n\r\n  return (\r\n    <section className='employees-birthday column'>\r\n      <h2 className='title section__title'>Employees Birthday</h2>\r\n      {activeEmployees.length === 0 ? 'Employees List is empty' : monthsList}\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default EmployeesBirthday;\r\n","import EmployeesPage from './EmployeesPage';\r\n\r\nexport default EmployeesPage;\r\n","import Employees from '../../components/Employees';\r\nimport EmployeesBirthday from '../../containers/EmployeesBirthday';\r\nimport './EmployeesPage.css';\r\n\r\nconst EmployeesPage = () => {\r\n  return (\r\n    <div className='employees-page'>\r\n      <h1 className='employees-page__title title'>Employees Page</h1>\r\n      <div className='container'>\r\n        <Employees />\r\n        <EmployeesBirthday />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EmployeesPage;\r\n","import { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport { initialState, reducer } from './reducers/rootReducer';\nimport EmployeesPage from './pages/EmployeesPage';\nimport './App.css';\n\nconst store = createStore(reducer, initialState, applyMiddleware(thunk));\n\nconst App = () => {\n  return (\n    <Provider store={store}>\n      <div className='app'>\n        <EmployeesPage />\n      </div>\n    </Provider>\n  );\n};\n\nexport default App;\n","import { LOAD_EMPLOYEES, SET_ACTIVE_EMPLOYEES } from '../constants/actionTypes';\r\n\r\nconst initialState = {\r\n  employees: [],\r\n  activeEmployees: [],\r\n};\r\n\r\nconst reducer = (state, action) => {\r\n  if (action.type === LOAD_EMPLOYEES) {\r\n    return {\r\n      ...state,\r\n      employees: action.payload,\r\n    };\r\n  }\r\n\r\n  if (action.type === SET_ACTIVE_EMPLOYEES) {\r\n    return {\r\n      ...state,\r\n      activeEmployees: action.payload,\r\n    };\r\n  }\r\n\r\n  return state;\r\n};\r\n\r\nexport { initialState, reducer };\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}